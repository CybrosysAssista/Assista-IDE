const vscode = require('vscode');
const fs = require('fs');
const path = require('path');


/**
 * Scaffold the module sub‑folders and files
 */
async function createOdooScaffold(rootUri, moduleName, type) {
    if (type == 'basic') {
        const folders = ['models', 'views', 'security'];

        const manifestContent = `{
        "name": "${moduleName}",
        "version": "18.0.1.0.0",
        "category": "Tools",
        "summary": "Auto-generated module",
        "description": "This is an autogenerated module scaffold.",
        "author": "",
        "maintainer": "",
        "website": "",
        "depends": ["base"],
        "data": [
        "security/ir.model.access.csv",
        "views/${moduleName}_views.xml"
        ],
        "assets": {},
        "license": "LGPL-3",
        "installable": True,
        "auto_install": True,
        "application": True
    }`;

        const modelName = moduleName.replace(/_/g, '.'); // e.g., my_module → my.module
        const formattedModelName = modelName.replace(/\./g, '_')
        const modelPy = `from odoo import models, fields, api

    class ${moduleName.replace(/_/g, '').replace(/\b\w/g, l => l.toUpperCase())}(models.Model):
        _name = '${modelName}'
        _description = '${moduleName}'

        name = fields.Char(string="Name", required=True)
        state = fields.Selection([
            ('draft', 'Draft'),
            ('confirmed', 'Confirmed'),
            ('done', 'Done')
        ], default='draft', string="State")
        description = fields.Text(string="Description")
        amount = fields.Float(string="Amount")
        active = fields.Boolean(default=True)

        @api.model
        def create(self, vals):
            return super().create(vals)

        def write(self, vals):
            return super().write(vals)

        def unlink(self):
            return super().unlink()

        def action_do_something(self):
            # Placeholder for button action
            pass
    `;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
    <odoo>
        <record id="${formattedModelName}_view_list" model="ir.ui.view">
            <field name="name">${formattedModelName}.view.list</field>
            <field name="model">${modelName}</field>
            <field name="arch" type="xml">
                <list>
                    <field name="name"/>
                    <field name="state"/>
                    <field name="amount"/>
                </list>
            </field>
        </record>

        <record id="${formattedModelName}_view_form" model="ir.ui.view">
            <field name="name">${formattedModelName}.view.form</field>
            <field name="model">${modelName}</field>
            <field name="arch" type="xml">
                <form string="Form">
                    <header>
                        <button name="action_do_something" type="object" string="Do Something" class="oe_highlight"/>
                    </header>
                    <sheet>
                        <group>
                            <field name="name"/>
                            <field name="state"/>
                            <field name="description"/>
                            <field name="amount"/>
                            <field name="active"/>
                        </group>
                    </sheet>
                </form>
            </field>
        </record>

        <record id="${formattedModelName}_view_kanban" model="ir.ui.view">
            <field name="name">${formattedModelName}.view.kanban</field>
            <field name="model">${modelName}</field>
            <field name="arch" type="xml">
                <kanban>
                    <field name="name"/>
                    <templates>
                        <t t-name="kanban-box">
                            <div class="oe_kanban_global_click">
                                <strong><field name="name"/></strong><br/>
                                <field name="state"/>
                            </div>
                        </t>
                    </templates>
                </kanban>
            </field>
        </record>

        <record id="${formattedModelName}_view_search" model="ir.ui.view">
            <field name="name">${formattedModelName}.view.search</field>
            <field name="model">${modelName}</field>
            <field name="arch" type="xml">
                <search>
                    <field name="name"/>
                    <field name="state"/>
                    <filter string="Active" name="active" domain="[('active','=',True)]"/>
                </search>
            </field>
        </record>

        <record id="action_${formattedModelName}" model="ir.actions.act_window">
            <field name="name">${moduleName}</field>
            <field name="res_model">${modelName}</field>
            <field name="view_mode">list,form,kanban</field>
        </record>

        <menuitem id="menu_${formattedModelName}_root" name="${moduleName}"/>
        <menuitem id="menu_${moduleName}_main" name="Records" parent="menu_${moduleName}_root" action="action_${formattedModelName}"/>
    </odoo>`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
    access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
    `;

        const files = {
            '__init__.py': 'from . import models',
            '__manifest__.py': manifestContent,
            'models/__init__.py': `from . import ${formattedModelName}`,
            [`models/${formattedModelName}.py`]: modelPy,
            [`views/${formattedModelName}_views.xml`]: viewXml,
            'security/ir.model.access.csv': accessCsv
        };

        // Create all directories
        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        // Create all files
        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'advanced') {
        const folders = ['models', 'views', 'security', 'data', 'demo'];

        const manifestContent = `{
        "name": "${moduleName}",
        "version": "18.0.1.0.0",
        "category": "Tools",
        "summary": "Auto-generated advanced module",
        "description": "This is an autogenerated advanced module scaffold.",
        "author": "",
        "maintainer": "",
        "website": "",
        "depends": ["base"],
        "data": [
            "security/ir.model.access.csv",
            "data/ir_sequence_data.xml",
            "data/cron.xml",
            "views/${moduleName}_views.xml"
        ],
        "demo": [
            "demo/${moduleName}_data.xml"
        ],
        "assets": {},
        "license": "LGPL-3",
        "installable": True,
        "auto_install": False,
        "application": True
    }`;

        const modelName = moduleName.replace(/_/g, '.');
        const formattedModelName = modelName.replace(/\./g, '_');

        const modelClassName = moduleName.replace(/_/g, '').replace(/\b\w/g, l => l.toUpperCase());

        const modelPy = `
from odoo import models, fields, api, _
from datetime import datetime

class ${modelClassName}(models.Model):
    _name = '${modelName}'
    _description = '${moduleName}'

    name = fields.Char(string="Name", default=lambda self: _('New'), readonly=True, copy=False,)
    state = fields.Selection([
        ('draft', 'Draft'),
        ('confirmed', 'Confirmed'),
        ('done', 'Done')
    ], default='draft', string="State")
    description = fields.Text(string="Description")
    amount = fields.Float(string="Amount")
    active = fields.Boolean(default=True)
    date = fields.Date(string="Date", default=fields.Date.context_today)



    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            sequence = self.env['ir.sequence'].next_by_code('${formattedModelName}')
            vals['name'] = sequence or _('New')
        return super().create(vals_list)

    def write(self, vals):
        return super().write(vals)

    def unlink(self):
        return super().unlink()

    def action_do_something(self):
        # Placeholder for button action
        pass

    def cron_sample_method(self):
        # Placeholder for scheduled action
        pass
`;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- List View -->
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="amount"/>
                <field name="date"/>
            </list>
        </field>
    </record>

    <!-- Form View -->
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Do Something" class="oe_highlight"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="state"/>
                        <field name="description"/>
                        <field name="amount"/>
                        <field name="date"/>
                        <field name="active"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <!-- Kanban View -->
    <record id="${formattedModelName}_view_kanban" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.kanban</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <kanban>
                <field name="name"/>
                <templates>
                    <t t-name="kanban-box">
                        <div class="oe_kanban_global_click">
                            <strong><field name="name"/></strong><br/>
                            <field name="state"/>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>

    <!-- Calendar View -->
    <record id="${formattedModelName}_view_calendar" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.calendar</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <calendar string="Calendar" date_start="date">
                <field name="name"/>
            </calendar>
        </field>
    </record>

    <!-- Pivot View -->
    <record id="${formattedModelName}_view_pivot" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.pivot</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <pivot>
                <field name="state"/>
                <field name="amount"/>
            </pivot>
        </field>
    </record>

    <!-- Search View -->
    <record id="${formattedModelName}_view_search" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.search</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <search>
                <field name="name"/>
                <field name="state"/>
                <filter string="Draft" name="state" domain="[('state','=','draft')]"/>
                <filter string="Active" name="active" domain="[('active','=',True)]"/>
            </search>
        </field>
    </record>

    <!-- Action -->
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${moduleName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form,kanban,calendar,pivot</field>
    </record>

    <!-- Menu -->
    <menuitem id="menu_${formattedModelName}_root" name="${moduleName}"/>
    <menuitem id="menu_${formattedModelName}_main" name="Records" parent="menu_${formattedModelName}_root" action="action_${formattedModelName}"/>
</odoo>
`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;
        const dataXml = `<?xml version="1.0" encoding="utf-8"?>
        <odoo>
            <data noupdate="1">
                <record id="${formattedModelName}_demo_data_1" model="${modelName}">
                    <field name="state">draft</field>
                    <field name="description">Demo Description</field>
                    
                </record>
                <record id="${formattedModelName}_demo_data_2" model="${modelName}">
                    <field name="state">confirmed</field>
                    <field name="description">Demo Description</field>
                </record>
            </data>
        </odoo>
    `;

        const sequenceXml = `<?xml version="1.0" encoding="utf-8"?>
        <odoo>
            <data noupdate="1">
                <record id="ir_sequence_${formattedModelName}" model="ir.sequence">
                    <field name="name">${moduleName} Sequence</field>
                    <field name="code">${formattedModelName}</field>
                    <field name="prefix">SEQ</field>
                    <field name="padding">5</field>
                    <field name="number_next">1</field>
                    <field name="number_increment">1</field>
                    <field name="company_id" eval="False"/>
                </record>
            </data>
        </odoo>
`;

        const cronXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="ir_cron_${formattedModelName}" model="ir.cron">
        <field name="name">${moduleName} Scheduled Action</field>
        <field name="model_id" ref="model_${formattedModelName}"/>
        <field name="state">code</field>
        <field name="code">model.cron_sample_method()</field>
        <field name="interval_number">1</field>
        <field name="interval_type">days</field>
        <field name="active">True</field>
    </record>
</odoo>
`;

        const files = {
            '__init__.py': 'from . import models',
            '__manifest__.py': manifestContent,
            'models/__init__.py': `from . import ${formattedModelName}`,
            [`models/${formattedModelName}.py`]: modelPy,
            [`views/${formattedModelName}_views.xml`]: viewXml,
            'security/ir.model.access.csv': accessCsv,
            'data/ir_sequence_data.xml': sequenceXml,
            [`demo/${moduleName}_data.xml`]: dataXml,
            'data/cron.xml': cronXml,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'owl_basic') {
        const folders = ['models', 'views', 'security', 'data', 'demo', 'static'];

        const manifestContent = `{
        "name": "${moduleName}",
        "version": "18.0.1.0.0",
        "category": "Tools",
        "summary": "",
        "description": "",
        "author": "",
        "maintainer": "",
        "website": "",
        "depends": ["base", "mail"],
        "data": [
            "security/ir.model.access.csv",
            "data/ir_sequence_data.xml",
            "data/cron.xml",
            "views/${moduleName}_views.xml"
        ],
        "demo": [
            "demo/${moduleName}_data.xml"
        ],
        "assets": {
            'web.assets_backend': [
                '${moduleName}/static/src/js/client_action.js',
                '${moduleName}/static/src/xml/client_action.xml',
            ]
        },
        "license": "LGPL-3",
        "installable": True,
        "auto_install": False,
        "application": True
    }`;

        const modelName = moduleName.replace(/_/g, '.');
        const formattedModelName = modelName.replace(/\./g, '_');

        const modelClassName = moduleName.replace(/_/g, '').replace(/\b\w/g, l => l.toUpperCase());

        const modelPy = `
from odoo import models, fields, api, _
from datetime import datetime

class ${modelClassName}(models.Model):
    _name = '${modelName}'
    _description = '${moduleName}'
    _inherit = ['mail.thread']

    name = fields.Char(string="Name", default=lambda self: _('New'), readonly=True, copy=False,)
    state = fields.Selection([
        ('draft', 'Draft'),
        ('confirmed', 'Confirmed'),
        ('done', 'Done')
    ], default='draft', string="State")
    description = fields.Text(string="Description")
    amount = fields.Float(string="Amount")
    active = fields.Boolean(default=True)
    date = fields.Date(string="Date", default=fields.Date.context_today)



    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            sequence = self.env['ir.sequence'].next_by_code('${formattedModelName}')
            vals['name'] = sequence or _('New')
        return super().create(vals_list)

    def write(self, vals):
        return super().write(vals)

    def unlink(self):
        return super().unlink()

    def action_do_something(self):
        # Placeholder for button action
        pass

    def cron_sample_method(self):
        # Placeholder for scheduled action
        pass
`;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- List View -->
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="amount"/>
                <field name="date"/>
            </list>
        </field>
    </record>

    <!-- Form View -->
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Do Something" class="oe_highlight"/>
                    <field name="state" widget="statusbar"/>
                </header>
                <sheet>
                    <div class="oe_title">
                        <label for="name"/>
                        <h1>
                            <field name="name"/>
                        </h1>
                    </div>
                    <group>
                        <group>
                            <field name="amount"/>
                        </group>
                        <group>
                            <field name="date"/>
                        </group>
                        <field name="description"/>
                        <field name="active" invisible="1"/>
                    </group>
                </sheet>
                 <chatter/>
            </form>
        </field>
    </record>

    <!-- Kanban View -->
    <record id="${formattedModelName}_view_kanban" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.kanban</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <kanban>
                <field name="name"/>
                <templates>
                    <t t-name="kanban-box">
                        <div class="oe_kanban_global_click">
                            <strong><field name="name"/></strong><br/>
                            <field name="state"/>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>

    <!-- Calendar View -->
    <record id="${formattedModelName}_view_calendar" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.calendar</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <calendar string="Calendar" date_start="date">
                <field name="name"/>
            </calendar>
        </field>
    </record>

    <!-- Pivot View -->
    <record id="${formattedModelName}_view_pivot" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.pivot</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <pivot>
                <field name="state"/>
                <field name="amount"/>
            </pivot>
        </field>
    </record>

    <!-- Search View -->
    <record id="${formattedModelName}_view_search" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.search</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <search>
                <field name="name"/>
                <field name="state"/>
                <filter string="Draft" name="state" domain="[('state','=','draft')]"/>
                <filter string="Active" name="active" domain="[('active','=',True)]"/>
            </search>
        </field>
    </record>

    <!-- Action -->
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${moduleName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form,kanban,calendar,pivot</field>
    </record>

    <!-- Client Action -->
    <record id="ir_actions_client" model="ir.actions.client">
            <field name="name">Client Action</field>
            <field name="tag">${moduleName}.${moduleName}</field>
    </record>
    <menuitem id="menu_${formattedModelName}_root" name="${moduleName}" action="ir_actions_client"/>

    <!-- Menu -->
    <menuitem id="menu_${formattedModelName}_root" name="${moduleName}"/>
    <menuitem id="menu_${formattedModelName}_main" name="Records" parent="menu_${formattedModelName}_root" action="action_${formattedModelName}"/>
</odoo>
`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;
        const dataXml = `<?xml version="1.0" encoding="utf-8"?>
        <odoo>
            <data noupdate="1">
                <record id="${formattedModelName}_demo_data_1" model="${modelName}">
                    <field name="state">draft</field>
                    <field name="description">Demo Description</field>
                </record>
                <record id="${formattedModelName}_demo_data_2" model="${modelName}">
                    <field name="state">confirmed</field>
                    <field name="description">Demo Description</field>
                </record>
            </data>
        </odoo>
    `;

        const sequenceXml = `<?xml version="1.0" encoding="utf-8"?>
        <odoo>
            <data noupdate="1">
                <record id="ir_sequence_${formattedModelName}" model="ir.sequence">
                    <field name="name">${moduleName} Sequence</field>
                    <field name="code">${formattedModelName}</field>
                    <field name="prefix">SEQ</field>
                    <field name="padding">5</field>
                    <field name="number_next">1</field>
                    <field name="number_increment">1</field>
                    <field name="company_id" eval="False"/>
                </record>
            </data>
        </odoo>
`;

        const cronXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="ir_cron_${formattedModelName}" model="ir.cron">
        <field name="name">${moduleName} Scheduled Action</field>
        <field name="model_id" ref="model_${formattedModelName}"/>
        <field name="state">code</field>
        <field name="code">model.cron_sample_method()</field>
        <field name="interval_number">1</field>
        <field name="interval_type">days</field>
        <field name="active">True</field>
    </record>
</odoo>
`;
        const clientAction =
            `/** @odoo-module */
    import { registry } from '@web/core/registry';
    import { Component, WillStart } from "@odoo/owl";
    import { useService } from "@web/core/utils/hooks";

    export class ${modelClassName} extends Component {
        setup() {
        }
    }
    ${modelClassName}.template = "${moduleName}.${modelClassName}";
    registry.category("actions").add("${moduleName}.${moduleName}", ${modelClassName});`;

        const clientActionTemplate =
            `<?xml version="1.0" encoding="UTF-8"?>
            <templates xml:space="preserve">
                <t t-name="${moduleName}.${modelClassName}">
                    <div class="container mt-2">
                        <h1 class="text-center text-bold text-primary">Welcome Screen</h1>
                    </div>
                </t>
            </templates>
        `;

        const files = {
            '__init__.py': 'from . import models',
            '__manifest__.py': manifestContent,
            'models/__init__.py': `from . import ${formattedModelName}`,
            [`models/${formattedModelName}.py`]: modelPy,
            [`views/${formattedModelName}_views.xml`]: viewXml,
            'security/ir.model.access.csv': accessCsv,
            'data/ir_sequence_data.xml': sequenceXml,
            ['static/src/js/client_action.js']: clientAction,
            ['static/src/xml/client_action.xml']: clientActionTemplate,
            [`demo/${moduleName}_data.xml`]: dataXml,
            'data/cron.xml': cronXml,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'owl_advanced') {
        const folders = ['models', 'views', 'security', 'data', 'demo', 'static', 'controllers'];

        const manifestContent = `{
        "name": "${moduleName}",
        "version": "18.0.1.0.0",
        "category": "Tools",
        "summary": "",
        "description": "",
        "author": "",
        "maintainer": "",
        "website": "",
        "depends": ["base", "mail", "contacts"],
        "data": [
            "security/ir.model.access.csv",
            "data/ir_sequence_data.xml",
            "data/cron.xml",
            "views/${moduleName}_views.xml"
        ],
        "demo": [
            "demo/${moduleName}_data.xml"
        ],
        "assets": {
            'web.assets_backend': [
                '${moduleName}/static/src/js/client_action.js',
                '${moduleName}/static/src/xml/client_action.xml',
                'https://www.gstatic.com/charts/loader.js'
            ]
        },
        "license": "LGPL-3",
        "installable": True,
        "auto_install": False,
        "application": True
    }`;

        const modelName = moduleName.replace(/_/g, '.');
        const formattedModelName = modelName.replace(/\./g, '_');

        const modelClassName = moduleName.replace(/_/g, '').replace(/\b\w/g, l => l.toUpperCase());
        const controllerPy = `from odoo.http import Controller, route, request


class OwlDashboard(Controller):

    @route('/apply/filter', type='json', auth='public', csrf=False)
    def apply_filter(self, date):
        domain = [('date', '=', date)] if date else []
        partner_data = request.env['${modelName}'].read_group(
            domain=domain,
            fields=['amount'],
            groupby=['partner_id'],
            lazy=False,
        )
        result = [{
            'partner': data['partner_id'][1],
            'total_records': data['__count'],
            'total_amount': data['amount'],
        } for data in partner_data]
        return result

    
    `

        const modelPy = `
from odoo import models, fields, api, _
from datetime import datetime

class ${modelClassName}(models.Model):
    _name = '${modelName}'
    _description = '${moduleName}'
    _inherit = ['mail.thread']

    name = fields.Char(string="Name", default=lambda self: _('New'), readonly=True, copy=False,)
    state = fields.Selection([
        ('draft', 'Draft'),
        ('confirmed', 'Confirmed'),
        ('done', 'Done')
    ], default='draft', string="State")
    description = fields.Text(string="Description")
    amount = fields.Float(string="Amount")
    active = fields.Boolean(default=True)
    date = fields.Date(string="Date", default=fields.Date.context_today)
    company_id = fields.Many2one(comodel_name='res.company', string='Company',
                                 default=lambda self: self.env.company)
    partner_id = fields.Many2one(comodel_name='res.partner', string='Partner', required=True)
    user_id = fields.Many2one(
        comodel_name='res.users',
        string='User',
        default=lambda self: self.env.user,
    )



    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            sequence = self.env['ir.sequence'].next_by_code('${formattedModelName}')
            vals['name'] = sequence or _('New')
        return super().create(vals_list)

    def write(self, vals):
        return super().write(vals)

    def unlink(self):
        return super().unlink()

    def action_do_something(self):
        # Placeholder for button action
        pass

    def cron_sample_method(self):
        # Placeholder for scheduled action
        pass
`;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- List View -->
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="amount"/>
                <field name="date"/>
            </list>
        </field>
    </record>

    <!-- Form View -->
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Do Something" class="oe_highlight"/>
                    <field name="state" widget="statusbar"/>
                </header>
                <sheet>
                    <div class="oe_title">
                        <label for="name"/>
                        <h1>
                            <field name="name"/>
                        </h1>
                    </div>
                    <group>
                        <group>
                            <field name="partner_id"/>
                            <field name="amount"/>
                            <field name="date"/>
                        </group>
                        <group>
                            <field name="company_id"/>
                            <field name="description"/>
                        </group>

                        <field name="active" invisible="1"/>
                    </group>
                </sheet>
                 <chatter/>
            </form>

        </field>
    </record>

    <!-- Kanban View -->
    <record id="${formattedModelName}_view_kanban" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.kanban</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <kanban>
                <field name="name"/>
                <templates>
                    <t t-name="kanban-box">
                        <div class="oe_kanban_global_click">
                            <strong><field name="name"/></strong><br/>
                            <field name="state"/>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>

    <!-- Calendar View -->
    <record id="${formattedModelName}_view_calendar" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.calendar</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <calendar string="Calendar" date_start="date">
                <field name="name"/>
            </calendar>
        </field>
    </record>

    <!-- Pivot View -->
    <record id="${formattedModelName}_view_pivot" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.pivot</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <pivot>
                <field name="state"/>
                <field name="amount"/>
            </pivot>
        </field>
    </record>

    <!-- Search View -->
    <record id="${formattedModelName}_view_search" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.search</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <search>
                <field name="name"/>
                <field name="state"/>
                <filter string="Draft" name="state" domain="[('state','=','draft')]"/>
                <filter string="Active" name="active" domain="[('active','=',True)]"/>
            </search>
        </field>
    </record>

    <!-- Action -->
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${moduleName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form,kanban,calendar,pivot</field>
    </record>

    <!-- Client Action -->
    <record id="ir_actions_client" model="ir.actions.client">
            <field name="name">Client Action</field>
            <field name="tag">${moduleName}.${moduleName}</field>
    </record>
    <menuitem id="menu_${formattedModelName}_root" name="${moduleName}" action="ir_actions_client"/>

    <!-- Menu -->
    <menuitem id="menu_${formattedModelName}_root" name="${moduleName}"/>
    <menuitem id="menu_${formattedModelName}_main" name="Records" parent="menu_${formattedModelName}_root" action="action_${formattedModelName}"/>
</odoo>
`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;
        const dataXml = `<?xml version="1.0" encoding="utf-8"?>
        <odoo>
            <data noupdate="1">
                <record id="${formattedModelName}_demo_data_1" model="${modelName}">
                    <field name="state">draft</field>
                    <field name="description">Demo Description</field>
                    <field name="partner_id" ref="base.res_partner_1"/>
                    <field name="amount">100</field>
                </record>
                <record id="${formattedModelName}_demo_data_2" model="${modelName}">
                    <field name="state">confirmed</field>
                    <field name="description">Demo Description</field>
                    <field name="partner_id" ref="base.res_partner_2"/>
                    <field name="amount">200</field>
                </record>
                <record id="${formattedModelName}_demo_data_3" model="${modelName}">
                    <field name="state">confirmed</field>
                    <field name="description">Demo Description</field>
                    <field name="partner_id" ref="base.res_partner_3"/>
                    <field name="amount">10</field>
                </record>
            </data>
        </odoo>
    `;

        const sequenceXml = `<?xml version="1.0" encoding="utf-8"?>
        <odoo>
            <data noupdate="1">
                <record id="ir_sequence_${formattedModelName}" model="ir.sequence">
                    <field name="name">${moduleName} Sequence</field>
                    <field name="code">${formattedModelName}</field>
                    <field name="prefix">SEQ</field>
                    <field name="padding">5</field>
                    <field name="number_next">1</field>
                    <field name="number_increment">1</field>
                    <field name="company_id" eval="False"/>
                </record>
            </data>
        </odoo>
`;

        const cronXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="ir_cron_${formattedModelName}" model="ir.cron">
        <field name="name">${moduleName} Scheduled Action</field>
        <field name="model_id" ref="model_${formattedModelName}"/>
        <field name="state">code</field>
        <field name="code">model.cron_sample_method()</field>
        <field name="interval_number">1</field>
        <field name="interval_type">days</field>
        <field name="active">True</field>
    </record>
</odoo>
`;
        const clientAction =
            `/** @odoo-module */
    import { registry } from '@web/core/registry';
    import { Component, onWillStart, useState, onMounted, useEffect } from "@odoo/owl";
    import { useService } from "@web/core/utils/hooks";
    import { rpc } from "@web/core/network/rpc";

    export class ${modelClassName} extends Component {
        setup() {
            this.orm = useService("orm");
            this.state = useState({
                records: [],
                selectedRecord: null,
                date: false,
                chartType: null,
                viewType: null,
            });
            onWillStart(this.onWillStart);
            onMounted(this._renderGraph);
            useEffect(() => {
                this._renderGraph()
            }, () => [this.state.date, this.state.chartType])
        }
        async onWillStart() {
            this.state.records = await this.orm.searchRead(
                "${modelName}",
                ['|', ['active', '=', true], ['active', '=', false]],
                ['name', 'state', 'description', 'active', 'date', 'amount', 'company_id', 'user_id']
            );
            const savedRecordId = localStorage.getItem("${formattedModelName}_selected_record");
            if (savedRecordId) {
                const savedId = parseInt(savedRecordId, 10);
                this.state.selectedRecord = this.state.records.find(record => record.id === savedId) || null;
            }
        }

        async _renderGraph() {
                var response = await rpc('/apply/filter',  {
                'date': this.state.date,
            })
            if (this.state.chartType == 'pie_chart') {
                google.charts.load('current', {'packages':['corechart']});
                google.charts.setOnLoadCallback(drawChart);
                function drawChart() {
                    var chartData = [['Partner', 'Name']];
                    response.forEach(function(item) {
                        chartData.push([item.partner, item.total_records]);
                    });
                    var data = google.visualization.arrayToDataTable(chartData);
                    var options = {
                    title: 'Pie Chart',
                    sliceVisibilityThreshold: 0,
                    pieSliceText: 'value',
                    pieSliceTextStyle: {
                        color: 'black',
                    },
                    };
                    var chart = new google.visualization.PieChart(document.getElementById('piechart'));
                    chart.draw(data, options);
                }
            } else if (this.state.chartType == 'donut_chart') {
                google.charts.load('current', {'packages':['corechart']});
                google.charts.setOnLoadCallback(drawChart);
                function drawChart() {
                    var chartData = [['Partner', 'Name']];
                    response.forEach(function(item) {
                        chartData.push([item.partner, item.total_records]);
                    });
                    var data = google.visualization.arrayToDataTable(chartData);
                    var options = {
                    title: 'Donut Chart',
                    sliceVisibilityThreshold: 0,
                    pieHole: 0.4,
                    pieSliceText: 'value',
                    pieSliceTextStyle: {
                        color: 'black',
                    },
                    };
                    var chart = new google.visualization.PieChart(document.getElementById('piechart'));
                    chart.draw(data, options);
                }
            } else if (this.state.chartType == 'curved_chart') {
                google.charts.load('current', {'packages':['corechart']});
                google.charts.setOnLoadCallback(drawChart);
                function drawChart() {
                    var chartData = [['Partner', 'Total Amount', 'Total Count']];
                    response.forEach(function(item) {
                        chartData.push([item.partner, item.total_amount, item.total_records]);
                    });
                    var data = google.visualization.arrayToDataTable(chartData);
                    var options = {
                        title: 'Line Chart',
                        curveType: 'function',
                        legend: { position: 'bottom' }
                    };
                    var chart = new google.visualization.LineChart(document.getElementById('piechart'));
                    chart.draw(data, options);
                }
            } else if (this.state.chartType == 'line_chart') {
                google.charts.load('current', {'packages':['corechart']});
                google.charts.setOnLoadCallback(drawChart);

                function drawChart() {

                    var chartData = [['Partner', 'Total Amount', 'Total Count']];
                    response.forEach(function(item) {
                        chartData.push([item.partner, item.total_amount, item.total_records]);
                    });
                    var data = google.visualization.arrayToDataTable(chartData);
                    var options = {
                        title: 'Line Chart',
                        legend: { position: 'bottom' }
                    };

                    var chart = new google.visualization.LineChart(document.getElementById('piechart'));
                    chart.draw(data, options);
                }
            }
        }

        onSelectRecord(event) {
            this.state.viewType = 'record_table'
            this.state.chartType = null
            const selectedId = event.target.value ? parseInt(event.target.value, 10) : null;
            this.state.selectedRecord = this.state.records.find(record => record.id === selectedId) || null;
            localStorage.setItem("${formattedModelName}_selected_record", selectedId || "");
        }
        onSelectChart(event) {
            this.state.viewType = 'graph_view'
            this.state.chartType = event.target.value
        }
    }
    ${modelClassName}.template = "${moduleName}.${modelClassName}";
    registry.category("actions").add("${moduleName}.${moduleName}", ${modelClassName});`;

        const clientActionTemplate =
            `<?xml version="1.0" encoding="UTF-8"?>
    <templates xml:space="preserve">
        <t t-name="${moduleName}.${modelClassName}">
            <style>
                /* Base Styles */
                .card {
                    border-radius: 15px;
                    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
                    transition: all 0.3s ease;
                    border: none;
                    overflow: hidden;
                }
                
                .card-header {
                    background-image: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
                    border-bottom: none;
                    padding: 1.2rem;
                }
                
                .card-body {
                    padding: 1.5rem;
                }
                
                /* Header Section */
                .header-section {
                    background: linear-gradient(120deg, #f8f9fa 0%, #e9ecef 100%);
                    border-radius: 15px;
                    padding: 2.5rem;
                    margin-bottom: 2.5rem;
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
                    position: relative;
                    overflow: hidden;
                }
                
                .header-section::before {
                    content: "";
                    position: absolute;
                    top: -50px;
                    right: -50px;
                    width: 100px;
                    height: 100px;
                    border-radius: 50%;
                    background: rgba(78, 115, 223, 0.1);
                }
                
                .header-section::after {
                    content: "";
                    position: absolute;
                    bottom: -60px;
                    left: -60px;
                    width: 120px;
                    height: 120px;
                    border-radius: 50%;
                    background: rgba(78, 115, 223, 0.08);
                }
                
                .page-title {
                    font-weight: 800;
                    letter-spacing: -0.5px;
                    position: relative;
                    display: inline-block;
                    color: #4e73df !important;
                    margin-bottom: 0.5rem;
                }
                
                .page-title::after {
                    content: "";
                    position: absolute;
                    bottom: -8px;
                    left: 50%;
                    transform: translateX(-50%);
                    width: 80px;
                    height: 4px;
                    background: linear-gradient(90deg, #4e73df, #36b9cc);
                    border-radius: 2px;
                }
                
                /* Table Styles */
                .table-container {
                    border-radius: 10px;
                    overflow: hidden;
                    margin-top: 0.5rem;
                }
                
                .table {
                    margin-bottom: 0;
                }
                
                .table thead th {
                    background-color: #f8f9fc;
                    border-top: none;
                    font-weight: 600;
                    letter-spacing: 0.5px;
                    text-transform: uppercase;
                    font-size: 0.85rem;
                    color: #4e73df;
                    padding: 1rem;
                }
                
                .table tbody tr:hover {
                    background-color: rgba(78, 115, 223, 0.05);
                }
                
                .table tbody th {
                    font-weight: 600;
                }
                
                /* Form Elements */
                .select-container {
                    position: relative;
                    margin-bottom: 1rem;
                }
                
                .select-container::after {
                    content: '107';
                    font-family: 'Font Awesome 6 Free';
                    font-weight: 900;
                    position: absolute;
                    right: 15px;
                    top: 70%;
                    transform: translateY(-50%);
                    pointer-events: none;
                    color: #4e73df;
                }
                
                .form-select {
                    padding: 0.75rem 1rem;
                    border-radius: 10px;
                    border: 1px solid #e3e6f0;
                    background-color: #ffffff;
                    font-weight: 500;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);
                    transition: all 0.2s ease;
                }
                
                .form-select:focus {
                    border-color: #bac8f3;
                    box-shadow: 0 0 0 0.25rem rgba(78, 115, 223, 0.15);
                }
                
                /* Badge  Button Styles */
                .badge {
                    padding: 0.5rem 0.8rem;
                    font-weight: 600;
                    letter-spacing: 0.5px;
                }
                
                /* Text Elements */
                .record-value {
                    font-weight: 500;
                    color: #28a745 !important;
                }
                
                .text-muted {
                    color: #858796 !important;
                }
                
                .lead {
                    font-weight: 400;
                }
                
                /* Animation  Effects */
                .animated-item {
                    animation: fadeInUp 0.6s ease-out forwards;
                }
                
                @keyframes fadeInUp {
                    from {
                        opacity: 0;
                        transform: translateY(20px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
                
                /* Empty State */
                .empty-state-icon {
                    font-size: 4rem;
                    color: #d1d3e2;
                    margin-bottom: 1.5rem;
                }
                
                /* Card Footer */
                .card-footer {
                    background-color: #f8f9fc;
                    border-top: 1px solid #e3e6f0;
                    padding: 1rem 1.5rem;
                }
                
                /* Custom scrollbar */
                .o_action_manager {
                    overflow-y: scroll !important;
                    scrollbar-width: thin;
                    scrollbar-color: #4e73df #f8f9fc;
                }
                
                .o_action_manager::-webkit-scrollbar {
                    width: 8px;
                }
                
                .o_action_manager::-webkit-scrollbar-track {
                    background: #f8f9fc;
                }
                
                .o_action_manager::-webkit-scrollbar-thumb {
                    background-color: #4e73df;
                    border-radius: 6px;
                    border: 3px solid #f8f9fc;
                }
                
                /* Hover Effects */
                .card:hover {
                    transform: translateY(-3px);
                    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
                }
            </style>
            <div class="container py-5">
                <!-- Header Section -->
                <div class="header-section text-center animated-item">
                    <h1 class="page-title display-4">Welcome Dashboard</h1>
                </div>

                <!-- Content Section -->
                <div class="row">
                    <!-- Selection Card -->
                    <div class="col-md-4 mb-4">
                        <div class="card h-100 animated-item">
                            <div class="card-header">
                                <h5 class="card-title mb-0 text-white d-flex align-items-center">
                                    <i class="fa fa-list-ul me-2"/>
                                    <span>Operations</span>
                                </h5>
                            </div>
                            <div class="card-body">
                                <form>
                                    <div class="form-group select-container">
                                        <label for="model-records" class="form-label fw-bold mb-2">Choose from available records:</label>
                                        <select class="form-select" id="model-records"
                                                t-on-change="onSelectRecord">
                                            <option value="" selected="">Select an option</option>
                                            <t t-foreach="state.records" t-as="record"
                                            t-key="record.id">
                                                <option t-att-value="record.id"
                                                        t-att-selected="record.id === state.selectedRecord?.id">
                                                    <t t-esc="record.name"/>
                                                </option>
                                            </t>
                                        </select>
                                    </div>
                                </form>
                                <p class="text-muted small mt-3 fst-italic">
                                    <i class="fa fa-info-circle me-1"/>
                                    Select a record to view its complete details
                                </p>
                            </div>
                            <div class="card-body">
                                <form>
                                    <div class="form-group select-container">
                                        <label for="model-records" class="form-label fw-bold mb-2">Graphical Representation:</label>
                                        <select class="form-select" id="model-graph"
                                                t-on-change="onSelectChart">
                                            <option selected="">Select an option</option>
                                            <option value="pie_chart">Pie chart</option>
                                            <option value="line_chart">Line chart</option>
                                            <option value="curved_chart">Curved chart</option>
                                            <option value="donut_chart">Donut chart</option>
                                        </select>
                                    </div>
                                </form>
                                <p class="text-muted small mt-3 fst-italic">
                                    <i class="fa fa-info-circle me-1"/>
                                    Select an option to view the graphical representation
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Details Card -->
                    <div class="col-md-8">
                        <t t-if="state.viewType == 'record_table'">
                            <t t-if="state.selectedRecord">
                                <div class="card animated-item">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h5 class="card-title mb-0 text-white d-flex align-items-center">
                                            <i class="fa fa-info-circle me-2"/>
                                            <span>Architecture</span>
                                        </h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="table-container">
                                            <table class="table table-striped table-hover">
                                                <thead>
                                                    <tr>
                                                        <th scope="col">Field</th>
                                                        <th scope="col">Value</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <t t-foreach="Object.entries(state.selectedRecord)" t-as="entry" t-key="entry[0]">
                                                        <tr>
                                                            <th scope="row">
                                                                <i class="fa fa-circle-dot me-2 text-primary"/>
                                                                <span t-esc="entry[0]"/>
                                                            </th>
                                                            <td>
                                                                <span class="record-value" t-esc="entry[1]"/>
                                                            </td>
                                                        </tr>
                                                    </t>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </t>
                            <t t-else="">
                                <div class="card h-100 animated-item">
                                    <div class="card-body d-flex flex-column justify-content-center align-items-center text-center p-5">
                                        <i class="fa fa-hand-point-left empty-state-icon"/>
                                        <h4 class="mt-2 mb-3 text-primary">No Record Selected</h4>
                                        <p class="text-muted mb-0">Please select a record from the list to view its details</p>
                                    </div>
                                </div>
                            </t>
                        </t>
                        <t t-elif="state.viewType == 'graph_view'">
                            <div class="card h-100 animated-item">
                                <input class="form-control" t-model="state.date" type="date" style="background-color: white" placeholder="Choose a date"/>
                                <div id="piechart" style="width: 900px; height: 500px;"/>
                            </div>
                        </t>
                        <t t-else="">

                        </t>
                    </div>
                </div>
            </div>
        </t>
    </templates>`;

        const files = {
            '__init__.py': 'from . import models, controllers',
            '__manifest__.py': manifestContent,
            'models/__init__.py': `from . import ${formattedModelName}`,
            'controllers/__init__.py': `from . import main`,
            ['controllers/main.py']: controllerPy,
            [`models/${formattedModelName}.py`]: modelPy,
            [`views/${formattedModelName}_views.xml`]: viewXml,
            'security/ir.model.access.csv': accessCsv,
            'data/ir_sequence_data.xml': sequenceXml,
            ['static/src/js/client_action.js']: clientAction,
            ['static/src/xml/client_action.xml']: clientActionTemplate,
            [`demo/${moduleName}_data.xml`]: dataXml,
            'data/cron.xml': cronXml,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'systray_module') {
        const folders = ['static'];

        const manifestContent = `{
    "name": "${moduleName}",
    "version": "18.0.1.0.0",
    "category": "Tools",
    "summary": "Auto-generated module",
    "description": "",
    "author": "",
    "maintainer": "",
    "website": "",
    "depends": ["base", "web"],
    "data": [],
    'assets': {
        'web.assets_backend': [
            '${moduleName}/static/src/js/systray.js',
            '${moduleName}/static/src/xml/systray_templates.xml',
        ],
    },
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": True
    }`;

const systrayJS = `/** @odoo-module **/

import { registry } from "@web/core/registry";
import { useService } from "@web/core/utils/hooks";
import { Component } from "@odoo/owl";

class SystrayIcon extends Component {
    setup() {
        super.setup();
        this.notification = useService("notification");
    }

    showNotification() {
        this.notification.add("Hello! This is a notification", {
            title: "Systray Notification",
            type: "info",
            sticky: false,
        });
    }
}

SystrayIcon.template = "systray_icon";

export const systrayItem = {
    Component: SystrayIcon,
};

registry.category("systray").add("SystrayIcon", systrayItem, { sequence: 1 });
`;


const systrayXML = `<?xml version="1.0" encoding="UTF-8" ?>

<templates xml:space="preserve">
<t t-name="systray_icon" owl="1">
    <div>
        <i
            class="fa fa-star-o"
            title="My Custom Icon"
            style="cursor: pointer; font-size: 18px;"
            t-on-click="showNotification"
        />
    </div>
</t>
</templates>`;

        const files = {
            '__init__.py': '',
            '__manifest__.py': manifestContent,
            [`static/src/js/systray.js`]: systrayJS,
            [`static/src/xml/systray_templates.xml`]: systrayXML,
        };

        // Create all directories
        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        // Create all files
        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    }
}


function getAllModelNames(workspaceFolders) {
    const modelNames = new Set();
    const modelRegex = /_name\s*=\s*['"]([\w.]+)['"]/;
    const walk = (dir) => {
        const files = fs.readdirSync(dir);
        for (const file of files) {
            const fullPath = path.join(dir, file);
            const stat = fs.statSync(fullPath);
            if (stat.isDirectory()) {
                walk(fullPath);
            } else if (stat.isFile() && file.endsWith('.py')) {
                try {
                    const content = fs.readFileSync(fullPath, 'utf8');
                    const lines = content.split('\n');
                    for (const line of lines) {
                        const match = modelRegex.exec(line);
                        if (match) {
                            modelNames.add(match[1]);
                        }
                    }
                } catch (err) {
                    console.warn(`Failed to read ${fullPath}:`, err);
                }
            }
        }
    };
    for (const folder of workspaceFolders) {
        walk(folder.uri.fsPath);
    }
    return Array.from(modelNames);
}


function createFieldItem(label, snippet, detail, documentation) {
    const item = new vscode.CompletionItem(label, vscode.CompletionItemKind.Snippet);
    item.insertText = new vscode.SnippetString(snippet);
    item.detail = detail;
    item.documentation = documentation;
    return item;
}


function activate(context) {
    /**
     * Provides model name suggestions for Odoo when typing in Python files.
     *
     * This shows suggestions when the user types `'` in lines like:
     * - _inherit = '...'
     * - env['...']
     *
     * It uses a cached list of model names and shows them as completion options.
     *
     * @param {vscode.ExtensionContext} context - The extension context to register the provider.
     */
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders) {
        return;
    }

    let modelNamesCache = getAllModelNames(workspaceFolders);
    const ModelProvider = vscode.languages.registerCompletionItemProvider(
        'python',
        {
            provideCompletionItems(document, position) {
                const line = document.lineAt(position);
                const textBefore = line.text.substring(0, position.character);
                const inheritContextRegex = /_inherit\s*=\s*(\[.*)?['"]?[^'"]*$/;
                const envContextRegex = /env\[\s*['"]?[^'"]*$/;
                if (!inheritContextRegex.test(textBefore) && !envContextRegex.test(textBefore)) {
                    return undefined;
                }
                return modelNamesCache.map(name => {
                    const item = new vscode.CompletionItem(`'${name}'`, vscode.CompletionItemKind.Value);
                    item.insertText = `'${name}'`;
                    item.detail = 'Odoo Models';
                    return item;
                });
            }
        },
        "'"
    );
    context.subscriptions.push(ModelProvider);
    const watcher = vscode.workspace.createFileSystemWatcher('**/*.py');
    const updateModelNames = () => {
        modelNamesCache = getAllModelNames(workspaceFolders);
    };
    watcher.onDidChange(updateModelNames);
    watcher.onDidCreate(updateModelNames);
    watcher.onDidDelete(updateModelNames);
    context.subscriptions.push(watcher);


    /**
    * Provides autocomplete suggestions for Odoo method decorators in Python files.
    *
    * When the user types '@', this shows common Odoo decorators like @api.model,
    * @api.depends, @api.onchange, etc.
    *
    * @param {vscode.ExtensionContext} context - The extension context used to register the provider.
    */
    const odooDecorators = [
        "api.model", "api.constrains(*args)", "api.depends(*args)", "api.depends_context(*args)",
        "api.onchange(*args)", "api.ondelete(*, at_uninstall)", "api.autovacuum", "api.returns(model, downgrade=None, upgrade=None)"
    ]
    const methodDecoratorProvider = vscode.languages.registerCompletionItemProvider(
        'python',
        {
            provideCompletionItems(document, position) {
                const line = document.lineAt(position);
                const textBefore = line.text.substring(0, position.character);
                if (!textBefore.trim().endsWith("@")) return undefined;
                return odooDecorators.map(type => {
                    const item = new vscode.CompletionItem(type, vscode.CompletionItemKind.Class);
                    item.insertText = type;
                    item.detail = 'Odoo Metjod Decorators';
                    // item.documentation = `odoo.fields.${type}`;
                    return item;
                });
            }
        },
        "@"
    );
    context.subscriptions.push(methodDecoratorProvider)


    /**
     * Provides autocomplete suggestions for Odoo field types when using `fields.` in Python files.
     *
     * Triggers when the user types `fields.` and suggests types like Char, Text, Many2one, etc.
     *
     * @param {vscode.ExtensionContext} context - The extension context used to register the provider.
     */
    const odooFieldTypes = [
        "Char", "Text", "Integer", "Float", "Boolean", "Date", "Datetime",
        "Many2one", "One2many", "Many2many", "Selection", "Binary", "Monetary", "Html"
    ];
    const fieldTypeProvider = vscode.languages.registerCompletionItemProvider(
        'python',
        {
            provideCompletionItems(document, position) {
                const line = document.lineAt(position);
                const textBefore = line.text.substring(0, position.character);
                if (!textBefore.trim().endsWith("fields.")) return undefined;
                return odooFieldTypes.map(type => {
                    const item = new vscode.CompletionItem(type, vscode.CompletionItemKind.Class);
                    item.insertText = type;
                    item.detail = 'Odoo Field Type';
                    item.documentation = `odoo.fields.${type}`;
                    return item;
                });
            }
        },
        "."
    );
    context.subscriptions.push(fieldTypeProvider);


    /**
     * Provides field definition snippets for Odoo models when typing uppercase letters in Python files.
     *
     * When a user types a capital letter (e.g., "C", "M", "B"), this suggests commonly used 
     * Odoo field definitions like fields.Char, fields.Many2one, fields.Boolean, etc.
     *
     * Each suggestion includes a ready-to-use snippet with string and help attributes.
     *
     * @param {vscode.ExtensionContext} context - The extension context used to register the provider.
     */
    const fieldSnippets = {
        B: [
            createFieldItem(
                'fields.Boolean',
                'boolean = fields.Boolean(string="", help="")',
                'Boolean Field',
                'Represents a true/false value'
            ),
            createFieldItem(
                'fields.Binary',
                'attachment = fields.Binary(string="", help="")',
                'Binary Field',
                'Used to store binary data like files'
            )
        ],
        C: [
            createFieldItem(
                'fields.Char',
                'character = fields.Char(string="", help="")',
                'Char Field',
                'A basic string field for short text'
            )
        ],
        I: [
            createFieldItem(
                'fields.Integer',
                'integer = fields.Integer(string="", help="")',
                'Integer Field',
                'For integer numbers'
            )
        ],
        F: [
            createFieldItem(
                'fields.Float',
                'float = fields.Float(string="", help="")',
                'Float Field',
                'For decimal numbers'
            )
        ],
        T: [
            createFieldItem(
                'fields.Text',
                'text = fields.Text(string="", help="")',
                'Text Field',
                'Used for longer text strings'
            )
        ],
        H: [
            createFieldItem(
                'fields.Html',
                'html = fields.Html(string="", help="")',
                'Html Field',
                'Used to store HTML content'
            )
        ],
        D: [
            createFieldItem(
                'fields.Date',
                'date = fields.Date(string="", help="")',
                'Date Field',
                'Used for selecting a date'
            ),
            createFieldItem(
                'fields.Datetime',
                'date_time = fields.Datetime(string="", help="")',
                'Datetime Field',
                'Used for selecting a date and time'
            )
        ],
        S: [
            createFieldItem(
                'fields.Selection',
                `selection = fields.Selection([\n    ('draft', 'Draft'),\n    ('confirmed', 'Confirmed'),\n    ('done', 'Done')\n],\nstring="",\ndefault='draft', help="")`,
                'Selection Field',
                'Allows selection from a predefined list'
            )
        ],
        M: [
            createFieldItem(
                'fields.Many2one',
                "field_id = fields.Many2one('model.name', string=\"\", help=\"\")",
                'Many2one Field',
                'Links to a single record of another model'
            ),
            createFieldItem(
                'fields.Many2many',
                "field_ids = fields.Many2many('model.name', string=\"\", help=\"\")",
                'Many2many Field',
                'Represents a many-to-many relationship'
            ),
            createFieldItem(
                'fields.Monetary',
                'amount = fields.Monetary(string="", help="")',
                'Monetary Field',
                'Used for monetary values and linked currency'
            )
        ],
        O: [
            createFieldItem(
                'fields.One2many',
                "field_ids = fields.One2many('model.name', 'connection_field', string=\"\", help=\"\")",
                'One2many Field',
                'Represents a one-to-many relationship'
            )
        ]
    };
    const fieldProvider = vscode.languages.registerCompletionItemProvider(
        'python',
        {
            provideCompletionItems(document, position) {
                const line = document.lineAt(position);
                const textBefore = line.text.substring(0, position.character);
                const match = textBefore.match(/\b([A-Z])$/);
                if (!match) return;
                const key = match[1];
                return fieldSnippets[key] || undefined;
            }
        },
        ...Object.keys(fieldSnippets)
    );
    context.subscriptions.push(fieldProvider);


    /**
     * Suggests method names from the inherited Odoo model when typing `f` in Python files.
     *
     * - Detects the current model name from `_inherit = 'model.name'`.
     * - Searches for the corresponding Python file (e.g., `model_name.py`) in the workspace.
     * - Extracts all method names (excluding special methods like `__init__`) from that file.
     * - Provides them as autocomplete suggestions for reuse or overriding.
     *
     * @param {vscode.ExtensionContext} context - The extension context used to register the provider.
     */
    const MethodProvider = vscode.languages.registerCompletionItemProvider(
        'python',
        {
            async provideCompletionItems(document, position) {
                const fileContent = document.getText();
                const inheritRegex = /\_inherit\s*=\s*['"]([\w.]+)['"]/;
                const match = inheritRegex.exec(fileContent);
                if (!match) return [];
                const currentModel = match[1];
                const pythonFileName = `${currentModel.replace(/\./g, '_')}.py`;
                const modelFiles = await vscode.workspace.findFiles(`**/${pythonFileName}`);
                if (modelFiles.length === 0) {
                    return [];
                }
                const allMethods = new Set();
                for (const file of modelFiles) {
                    try {
                        const content = (await vscode.workspace.fs.readFile(file)).toString();
                        const methodRegex = /def\s+(\w+)\s*\(/g;
                        let match;
                        while ((match = methodRegex.exec(content)) !== null) {
                            const methodName = match[1];
                            if (!methodName.startsWith('__')) {
                                allMethods.add(methodName);
                            }
                        }
                    } catch (err) {
                        console.warn(`Failed to read model file ${file.fsPath}:`, err);
                    }
                }
                return [...allMethods].map(methodName => {
                    const item = new vscode.CompletionItem(methodName, vscode.CompletionItemKind.Method);
                    item.insertText = `def ${methodName}`;
                    item.detail = `Method from model: ${currentModel}`;
                    item.documentation = `Suggested from ${pythonFileName}`;
                    return item;
                });
            }
        },
        "f"
    );
    context.subscriptions.push(MethodProvider);


    /**
     * Suggests Odoo model field names after typing `self.` or a variable assigned to `self`.
     *
     * - Detects inherited model from `_inherit = 'model.name'`.
     * - Finds variables referring to `self` (like `self`, or `rec = self`, or `for rec in self`).
     * - Loads the corresponding model file (e.g., `model_name.py`) and extracts field names.
     * - Suggests those fields when typing `self.` or similar variable names.
     *
     * @param {vscode.ExtensionContext} context - The extension context used to register the provider.
     */
    const selfFieldProvider = vscode.languages.registerCompletionItemProvider(
        'python',
        {
            async provideCompletionItems(document, position) {
                const fileContent = document.getText();
                const lineText = document.lineAt(position).text;
                const prefixText = lineText.substring(0, position.character);
                const inheritMatch = fileContent.match(/_inherit\s*=\s*['"]([\w.]+)['"]/);
                if (!inheritMatch) return;
                const inheritedModel = inheritMatch[1];
                const modelFileName = inheritedModel.replace(/\./g, '_') + '.py';
                const variableMatch = prefixText.match(/(\w+)\.$/);
                if (!variableMatch) return;
                const currentVar = variableMatch[1];
                const selfVars = new Set(['self']);
                const lines = fileContent.split('\n');
                for (const line of lines) {
                    const assignMatch = line.match(/^\s*(\w+)\s*=\s*self\b/);
                    if (assignMatch) {
                        selfVars.add(assignMatch[1]);
                    }
                    const loopMatch = line.match(/^\s*for\s+(\w+)\s+in\s+self\b/);
                    if (loopMatch) {
                        selfVars.add(loopMatch[1]);
                    }
                }
                if (!selfVars.has(currentVar)) return;
                const modelFiles = await vscode.workspace.findFiles(`**/${modelFileName}`);
                if (modelFiles.length === 0) return;
                const fieldRegex = /^\s*(\w+)\s*=\s*fields\.\w+\(/;
                const allFields = new Set();
                for (const file of modelFiles) {
                    try {
                        const content = (await vscode.workspace.fs.readFile(file)).toString();
                        const lines = content.split('\n');
                        for (const line of lines) {
                            const match = fieldRegex.exec(line);
                            if (match) {
                                allFields.add(match[1]);
                            }
                        }
                    } catch (err) {
                        console.warn(`Failed to read model file ${file.fsPath}:`, err);
                    }
                }
                return [...allFields].map(field => {
                    const item = new vscode.CompletionItem(field, vscode.CompletionItemKind.Field);
                    item.insertText = field;
                    item.detail = `Field from inherited model: ${inheritedModel}`;
                    return item;
                });
            }
        },
        '.'
    );
    context.subscriptions.push(selfFieldProvider);


    /**
     * Registers the "odoo-dev.createModule" command in VS Code.
     * 
     * When triggered (typically via right-click on a folder), this command:
     * 1. Prompts the user to enter a valid Odoo module name (lowercase letters and underscores only).
     * 2. Validates the module name format.
     * 3. Checks if a module with that name already exists in the selected directory.
     * 4. If not, it creates the module directory and scaffolds the basic structure using `createOdooScaffold`.
     * 5. Opens the newly created `__manifest__.py` file in the editor.
     * 6. Notifies the user of success or failure.
     */
    /**
 * Registers the "Create Basic Odoo Module" command.
 */
    const cmdBasic = 'odoo-dev.createModuleBasic';
    const moduleProviderBasic = vscode.commands.registerCommand(cmdBasic, async (uri) => {
        if (!uri || !uri.fsPath) {
            return vscode.window.showErrorMessage(
                'Right‑click a folder and choose "Create Basic Odoo Module".'
            );
        }

        const moduleName = await vscode.window.showInputBox({
            prompt: 'New Odoo module name (basic)',
            validateInput: v =>
                /^[a-z_]+$/.test(v) ? null : 'Only small letters and underscores allowed'
        });
        if (!moduleName) return;

        const targetUri = vscode.Uri.joinPath(uri, moduleName);
        try {
            await vscode.workspace.fs.stat(targetUri);
            return vscode.window.showErrorMessage(`Module "${moduleName}" already exists.`);
        } catch { }

        try {
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: `Creating Basic Odoo module “${moduleName}”…`,
                cancellable: false
            }, async () => {
                await vscode.workspace.fs.createDirectory(targetUri);
                await createOdooScaffold(targetUri, moduleName, 'basic');  // your existing function
            });
            await vscode.commands.executeCommand('workbench.files.action.refreshFilesExplorer');
            const manifestUri = vscode.Uri.joinPath(targetUri, '__manifest__.py');
            await vscode.window.showTextDocument(manifestUri);
            vscode.window.showInformationMessage(`Basic Odoo module “${moduleName}” created successfully!`);
        } catch (err) {
            vscode.window.showErrorMessage(`Failed to create module: ${err.message}`);
        }
    });

    context.subscriptions.push(moduleProviderBasic);

    /**
     * Registers the "Create Advanced Odoo Module" command.
     * 
     * TODO: Implement advanced scaffolding logic here.
     */
    const cmdAdvanced = 'odoo-dev.createModuleAdvanced';
    const moduleProviderAdvanced = vscode.commands.registerCommand(cmdAdvanced, async (uri) => {
        if (!uri || !uri.fsPath) {
            return vscode.window.showErrorMessage(
                'Right‑click a folder and choose "Create Advanced Module".'
            );
        }

        const moduleName = await vscode.window.showInputBox({
            prompt: 'New Odoo module name (advanced)',
            validateInput: v =>
                /^[a-z_]+$/.test(v) ? null : 'Only small letters and underscores allowed'
        });
        if (!moduleName) return;

        const targetUri = vscode.Uri.joinPath(uri, moduleName);
        try {
            await vscode.workspace.fs.stat(targetUri);
            return vscode.window.showErrorMessage(`Module "${moduleName}" already exists.`);
        } catch { }

        try {
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: `Creating Advanced Odoo module “${moduleName}”…`,
                cancellable: false
            }, async () => {
                await vscode.workspace.fs.createDirectory(targetUri);
                await createOdooScaffold(targetUri, moduleName, 'advanced');  // your existing function
            });
            await vscode.commands.executeCommand('workbench.files.action.refreshFilesExplorer');
            const manifestUri = vscode.Uri.joinPath(targetUri, '__manifest__.py');
            await vscode.window.showTextDocument(manifestUri);
            vscode.window.showInformationMessage(`Advanced Odoo module “${moduleName}” created successfully!`);
        } catch (err) {
            vscode.window.showErrorMessage(`Failed to create module: ${err.message}`);
        }
    });
    context.subscriptions.push(moduleProviderAdvanced);





    const cmdOwlBasic = 'odoo-dev.createModuleowlBasic';
    const moduleProviderOwlBasic = vscode.commands.registerCommand(cmdOwlBasic, async (uri) => {
        if (!uri || !uri.fsPath) {
            return vscode.window.showErrorMessage(
                'Right‑click a folder and choose "Create OWL Basic Module".'
            );
        }

        const moduleName = await vscode.window.showInputBox({
            prompt: 'New Odoo module name (owl basic)',
            validateInput: v =>
                /^[a-z_]+$/.test(v) ? null : 'Only small letters and underscores allowed'
        });
        if (!moduleName) return;

        const targetUri = vscode.Uri.joinPath(uri, moduleName);
        try {
            await vscode.workspace.fs.stat(targetUri);
            return vscode.window.showErrorMessage(`Module "${moduleName}" already exists.`);
        } catch { }

        try {
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: `Creating Basic Owl module “${moduleName}”…`,
                cancellable: false
            }, async () => {
                await vscode.workspace.fs.createDirectory(targetUri);
                await createOdooScaffold(targetUri, moduleName, 'owl_basic');
            });
            await vscode.commands.executeCommand('workbench.files.action.refreshFilesExplorer');
            const manifestUri = vscode.Uri.joinPath(targetUri, '__manifest__.py');
            await vscode.window.showTextDocument(manifestUri);
            vscode.window.showInformationMessage(`Basic OWL module “${moduleName}” created successfully!`);
        } catch (err) {
            vscode.window.showErrorMessage(`Failed to create module: ${err.message}`);
        }
    });
    context.subscriptions.push(moduleProviderOwlBasic);


    const cmdSystrayMenu = 'odoo-dev.createModuleWithSystrayMenu';
    const moduleSystray = vscode.commands.registerCommand(cmdSystrayMenu, async (uri) => {
        if (!uri || !uri.fsPath) {
            return vscode.window.showErrorMessage(
                'Right‑click a folder and choose "Odoo module with Systray menu".'
            );
        }

        const moduleName = await vscode.window.showInputBox({
            prompt: 'New Odoo module name (Odoo module with Systray menu)',
            validateInput: v =>
                /^[a-z_]+$/.test(v) ? null : 'Only small letters and underscores allowed'
        });
        if (!moduleName) return;

        const targetUri = vscode.Uri.joinPath(uri, moduleName);
        try {
            await vscode.workspace.fs.stat(targetUri);
            return vscode.window.showErrorMessage(`Module "${moduleName}" already exists.`);
        } catch { }

        try {
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: `Creating Odoo module with Systray menu “${moduleName}”…`,
                cancellable: false
            }, async () => {
                await vscode.workspace.fs.createDirectory(targetUri);
                await createOdooScaffold(targetUri, moduleName, 'systray_module');
            });
            await vscode.commands.executeCommand('workbench.files.action.refreshFilesExplorer');
            const manifestUri = vscode.Uri.joinPath(targetUri, '__manifest__.py');
            await vscode.window.showTextDocument(manifestUri);
            vscode.window.showInformationMessage(`Odoo module with Systray menu “${moduleName}” created successfully!`);
        } catch (err) {
            vscode.window.showErrorMessage(`Failed to create module: ${err.message}`);
        }
    });
    context.subscriptions.push(moduleSystray);




    const cmdOwlAdvanced = 'odoo-dev.createModuleowlAdvanced';
    const moduleProviderOwlAdvanced = vscode.commands.registerCommand(cmdOwlAdvanced, async (uri) => {
        if (!uri || !uri.fsPath) {
            return vscode.window.showErrorMessage(
                'Right‑click a folder and choose "Create OWL Advanced Module".'
            );
        }

        const moduleName = await vscode.window.showInputBox({
            prompt: 'New Odoo module name (owl advanced)',
            validateInput: v =>
                /^[a-z_]+$/.test(v) ? null : 'Only small letters and underscores allowed'
        });
        if (!moduleName) return;

        const targetUri = vscode.Uri.joinPath(uri, moduleName);
        try {
            await vscode.workspace.fs.stat(targetUri);
            return vscode.window.showErrorMessage(`Module "${moduleName}" already exists.`);
        } catch { }

        try {
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: `Creating Advanced Owl module “${moduleName}”…`,
                cancellable: false
            }, async () => {
                await vscode.workspace.fs.createDirectory(targetUri);
                await createOdooScaffold(targetUri, moduleName, 'owl_advanced');
            });
            await vscode.commands.executeCommand('workbench.files.action.refreshFilesExplorer');
            const manifestUri = vscode.Uri.joinPath(targetUri, '__manifest__.py');
            await vscode.window.showTextDocument(manifestUri);
            vscode.window.showInformationMessage(`Advanced OWL module “${moduleName}” created successfully!`);
        } catch (err) {
            vscode.window.showErrorMessage(`Failed to create module: ${err.message}`);
        }
    });
    context.subscriptions.push(moduleProviderOwlAdvanced);
}
function deactivate() { }
module.exports = {
    activate,
    deactivate
};
